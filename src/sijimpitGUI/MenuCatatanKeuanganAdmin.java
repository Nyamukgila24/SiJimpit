/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package sijimpitGUI;

import java.sql.*;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.sql.Statement;
import java.util.Calendar;
import java.util.HashMap;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.view.JasperViewer;
import sijimpit.Koneksi;

/**
 *
 * @author Aini Intan Saylendra
 */
public class MenuCatatanKeuanganAdmin extends javax.swing.JFrame {

    private int currentPage = 1;  // Mulai dari halaman 1
    private int rowsPerPage = 50; // Jumlah baris per halaman
    private int totalRows = 0;    // Total baris dari database
    private int totalPages = 0;   // Total halaman yang tersedia
    private String currentSelectedMonth = "Bulan Januari"; // Simpan bulan yang sedang aktif
    private boolean isTahunLalu = false; // Defaultnya adalah menampilkan data tahun ini (false = tahun ini, true = tahun lalu)

//    private Connection conn;
    /**
     * Creates new form MenuCatatanKeuanganAdmin
     */
    public MenuCatatanKeuanganAdmin() {
        setLocationRelativeTo(null);
        initComponents();
        inisialisasiBulan();

        if (combo_bulan.getItemCount() > 0) {
            combo_bulan.setSelectedIndex(0);
        }
        reloadCurrentPage(); // Memuat data untuk bulan/tahun default (Januari tahun ini)
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        btn_unduh = new javax.swing.JButton();
        btn_back = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        Tbl_Keuangan = new javax.swing.JTable();
        combo_bulan = new javax.swing.JComboBox<>();
        btn_sebelumnya = new javax.swing.JButton();
        btn_berikutnya = new javax.swing.JButton();
        lblPageStatus = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximumSize(new java.awt.Dimension(600, 500));
        setMinimumSize(new java.awt.Dimension(300, 400));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jPanel2.setBackground(new java.awt.Color(0, 204, 51));

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Catatan Keuangan Masyarakat");

        btn_unduh.setBackground(new java.awt.Color(0, 204, 51));
        btn_unduh.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sijimpitGUI/SijimpitIcon/inbox (1).png"))); // NOI18N
        btn_unduh.setBorder(null);
        btn_unduh.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_unduhActionPerformed(evt);
            }
        });

        btn_back.setBackground(new java.awt.Color(0, 204, 51));
        btn_back.setIcon(new javax.swing.ImageIcon(getClass().getResource("/sijimpitGUI/SijimpitIcon/back.png"))); // NOI18N
        btn_back.setBorder(null);
        btn_back.setPreferredSize(new java.awt.Dimension(32, 32));
        btn_back.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_backActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(98, 98, 98)
                .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
                .addGap(69, 69, 69)
                .addComponent(btn_unduh)
                .addGap(27, 27, 27))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(21, 21, 21)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(btn_unduh)
                            .addComponent(btn_back, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(29, 29, 29))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jLabel8)
                        .addGap(24, 24, 24))))
        );

        Tbl_Keuangan.setBorder(javax.swing.BorderFactory.createEmptyBorder(1, 1, 1, 1));
        Tbl_Keuangan.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null},
                {null, null, null, null, null}
            },
            new String [] {
                "Nama", "NIK", "No. HP", "Nominal", "Tanggal"
            }
        ));
        Tbl_Keuangan.setShowGrid(false);
        jScrollPane1.setViewportView(Tbl_Keuangan);

        combo_bulan.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Bulan Januari", "Bulan Februari", "Bulan Maret", "Bulan April", "Bulan Mei", "Bulan Juni", "Bulan Juli", "Bulan Agustus", "Bulan September", "Bulan Oktober", "Bulan November", "Bulan Desember" }));
        combo_bulan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                combo_bulanActionPerformed(evt);
            }
        });

        btn_sebelumnya.setBackground(new java.awt.Color(255, 255, 0));
        btn_sebelumnya.setText("Data Sebelumnya");
        btn_sebelumnya.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_sebelumnyaActionPerformed(evt);
            }
        });

        btn_berikutnya.setBackground(new java.awt.Color(255, 255, 0));
        btn_berikutnya.setText("Data Berikutnya");
        btn_berikutnya.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btn_berikutnyaActionPerformed(evt);
            }
        });

        lblPageStatus.setText("Menampilkan jumlah halaman");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(combo_bulan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(0, 0, Short.MAX_VALUE))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(137, 137, 137)
                        .addComponent(btn_sebelumnya)
                        .addGap(79, 79, 79)
                        .addComponent(btn_berikutnya, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(lblPageStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 553, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(combo_bulan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 8, Short.MAX_VALUE)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 276, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addComponent(lblPageStatus, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btn_sebelumnya)
                    .addComponent(btn_berikutnya))
                .addGap(33, 33, 33))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void inisialisasiBulan() {
        combo_bulan.removeAllItems(); // Menghapus semua item yang ada di combobox bulan

        String[] bulan = {
            "Januari", "Februari", "Maret", "April", "Mei", "Juni",
            "Juli", "Agustus", "September", "Oktober", "November", "Desember"
        };
        for (String b : bulan) {
            combo_bulan.addItem("Bulan " + b); // Mengisi combobox dengan nama-nama bulan
        }
        combo_bulan.addItem("Tahun Lalu"); // Menambahkan opsi 'Tahun Lalu'
    }

    private void loadDataForPage(int bulan, int tahun, boolean isTahunLaluMode) {
        // Membuat model tabel baru dan mengaturnya ke JTable
        DefaultTableModel model = new DefaultTableModel() {
            @Override
            public boolean isCellEditable(int row, int column) {
                return false; // Mengatur semua kolom menjadi tidak dapat diedit
            }
        };
        // Menambahkan kolom ke model tabel
        model.addColumn("Nama");
        model.addColumn("NIK");
        model.addColumn("No. HP");
        model.addColumn("Nominal");
        model.addColumn("Tanggal");

        Tbl_Keuangan.setModel(model);
        // Menghitung offset untuk pagination
        int offset = (currentPage - 1) * rowsPerPage;

        // Membuka koneksi database menggunakan try-with-resources untuk penutupan otomatis
        try (Connection conn = sijimpit.Koneksi.getConnection()) {
            // 1. Hitung Total Baris untuk pagination berdasarkan mode tahun lalu atau bulan/tahun
            String countQuery;
            if (isTahunLaluMode) {
                countQuery = "SELECT COUNT(*) FROM menu_pembayaran_warga WHERE YEAR(tanggal) = ? AND status = 'verifikasi'";
            } else {
                countQuery = "SELECT COUNT(*) FROM menu_pembayaran_warga WHERE MONTH(tanggal) = ? AND YEAR(tanggal) = ? AND status = 'verifikasi'";
            }

            try (PreparedStatement psCount = conn.prepareStatement(countQuery)) {
                // Menetapkan parameter query hitungan
                if (isTahunLaluMode) {
                    psCount.setInt(1, tahun);
                } else {
                    psCount.setInt(1, bulan);
                    psCount.setInt(2, tahun);
                }
                try (ResultSet countRs = psCount.executeQuery()) {
                    if (countRs.next()) {
                        totalRows = countRs.getInt(1); // Mendapatkan total baris
                        totalPages = (int) Math.ceil((double) totalRows / rowsPerPage); // Menghitung total halaman
                    }
                }
            }

            // 2. Ambil Data untuk Halaman Saat Ini berdasarkan mode tahun lalu atau bulan/tahun
            String dataQuery;
            if (isTahunLaluMode) {
                dataQuery = "SELECT nama, nik, no_hp, nominal, tanggal FROM menu_pembayaran_warga WHERE YEAR(tanggal) = ? AND status = 'verifikasi' ORDER BY nik ASC LIMIT ? OFFSET ?";
            } else {
                dataQuery = "SELECT nama, nik, no_hp, nominal, tanggal FROM menu_pembayaran_warga WHERE MONTH(tanggal) = ? AND YEAR(tanggal) = ? AND status = 'verifikasi' ORDER BY nik ASC LIMIT ? OFFSET ?";
            }

            try (PreparedStatement psData = conn.prepareStatement(dataQuery)) {
                // Menetapkan parameter query data
                if (isTahunLaluMode) {
                    psData.setInt(1, tahun);
                    psData.setInt(2, rowsPerPage);
                    psData.setInt(3, offset);
                } else {
                    psData.setInt(1, bulan);
                    psData.setInt(2, tahun);
                    psData.setInt(3, rowsPerPage);
                    psData.setInt(4, offset);
                }

                try (ResultSet rs = psData.executeQuery()) {
                    // Mengisi model tabel dengan data dari ResultSet
                    while (rs.next()) {
                        java.sql.Date sqlDate = rs.getDate("tanggal");
                        String formattedDate = "";
                        if (sqlDate != null) {
                            SimpleDateFormat sdf = new SimpleDateFormat("dd-MM-yyyy");
                            formattedDate = sdf.format(new Date(sqlDate.getTime()));
                        }
                        model.addRow(new Object[]{
                            rs.getString("nama"),
                            rs.getString("nik"),
                            rs.getString("no_hp"),
                            rs.getString("nominal"),
                            formattedDate
                        });
                    }
                }
            }
            // Memperbarui tombol pagination setelah data dimuat
            updatePaginationButtons();
            // Menangani error SQL
        } catch (SQLException e) {
            System.err.println("Gagal memuat data dengan pagination: " + e.getMessage());
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Gagal mengambil data dari database: " + e.getMessage(), "Error Database", JOptionPane.ERROR_MESSAGE);
        } catch (Exception e) {
            // Menangani kesalahan umum
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan tidak terduga: " + e.getMessage(), "Error Umum", JOptionPane.ERROR_MESSAGE);
        }
    }

    private int ubahBulanKeAngka(String selectedMonth) {
        if (selectedMonth == null) {
            return -1;
        }
        String trimmedSelectedMonth = selectedMonth.trim(); // Membersihkan spasi di awal/akhir string
        System.out.println("DEBUG: trimmedSelectedMonth: '" + trimmedSelectedMonth + "'");

        // Mengubah nama bulan string menjadi angka bulan (1-12)
        switch (trimmedSelectedMonth) {
            case "Bulan Januari":
                return 1;
            case "Bulan Februari":
                return 2;
            case "Bulan Maret":
                return 3;
            case "Bulan April":
                return 4;
            case "Bulan Mei":
                return 5;
            case "Bulan Juni":
                return 6;
            case "Bulan Juli":
                return 7;
            case "Bulan Agustus":
                return 8;
            case "Bulan September":
                return 9;
            case "Bulan Oktober":
                return 10;
            case "Bulan November":
                return 11;
            case "Bulan Desember":
                return 12;
            default:
                return -1; // Menginformasikan bahwa nama bulan tidak ditemukan atau tidak valid
        }
    }

    private void btn_backActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_backActionPerformed
        TampilanAwalAdmin admin = new TampilanAwalAdmin();
        admin.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_btn_backActionPerformed

    private void combo_bulanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_combo_bulanActionPerformed
        currentSelectedMonth = (String) combo_bulan.getSelectedItem(); // Simpan pilihan bulan
        currentPage = 1; // Reset ke halaman pertama setiap kali bulan/tahun diubah

        if (currentSelectedMonth != null && !currentSelectedMonth.trim().isEmpty()) {
            if (currentSelectedMonth.equals("Tahun Lalu")) {
                isTahunLalu = true;
                int currentYear = Calendar.getInstance().get(Calendar.YEAR);
                int lastYear = currentYear - 1;
                loadDataForPage(-1, lastYear, true); // -1 karena bulan tidak relevan untuk tahun lalu
            } else {
                isTahunLalu = false;
                int bulanAngka = ubahBulanKeAngka(currentSelectedMonth);
                if (bulanAngka != -1) {
                    int currentYear = Calendar.getInstance().get(Calendar.YEAR);
                    loadDataForPage(bulanAngka, currentYear, false);
                } else {
                    JOptionPane.showMessageDialog(this, "Pilihan bulan tidak valid.", "Error", JOptionPane.WARNING_MESSAGE);
                }
            }
        }
    }//GEN-LAST:event_combo_bulanActionPerformed

    private void btn_unduhActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_unduhActionPerformed
        try {
            String reportPath = "src/jasper/CatatanKeuangan.jasper"; // Lokasi file template laporan JasperReports
            HashMap<String, Object> parameters = new HashMap<>(); // Inisialisasi parameter laporan
            String selectedMonth = (String) combo_bulan.getSelectedItem(); // Ambil pilihan tahun dari combobox
            parameters.put("parameter_bulan", null);
            parameters.put("parameter_tahun", null);

            // Menentukan bulan berdasarkan pilihan combobox
            if (selectedMonth != null && !selectedMonth.trim().isEmpty()) {
                if (selectedMonth.equals("Tahun Lalu")) {
                    int currentYear = Calendar.getInstance().get(Calendar.YEAR);
                    int lastYear = currentYear - 1;
                    parameters.put("parameter_tahun", lastYear);
                    System.out.println("Parameters yang dikirim ke Jasper (Tahun Lalu): " + parameters);
                } else {
                    int monthNumber = ubahBulanKeAngka(selectedMonth);// Konversi nama bulan ke angka
                    if (monthNumber != -1) {
                        parameters.put("parameter_bulan", monthNumber);
                        int currentYear = Calendar.getInstance().get(Calendar.YEAR);
                        parameters.put("parameter_tahun", currentYear);
                        System.out.println("Parameters yang dikirim ke Jasper (Bulan): " + parameters);
                    } else {
                        JOptionPane.showMessageDialog(this, "Pilihan bulan tidak valid. Mohon pilih bulan yang benar.", "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }
                }
            } else {
                // Default ke bulan dan tahun sekarang jika tidak ada bulan yang dipilih
                int currentMonth = Calendar.getInstance().get(Calendar.MONTH) + 1;
                int currentYear = Calendar.getInstance().get(Calendar.YEAR);
                parameters.put("parameter_bulan", currentMonth);
                parameters.put("parameter_tahun", currentYear);
            }

            // Dapatkan koneksi dan isi laporan Jasper
            try (Connection conn = sijimpit.Koneksi.getConnection()) {
                if (conn == null) {
                    JOptionPane.showMessageDialog(this, "Koneksi ke database gagal dibuat untuk laporan. Pastikan database berjalan.", "Error Koneksi", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                JasperPrint print = JasperFillManager.fillReport(reportPath, parameters, conn);
                JasperViewer viewer = new JasperViewer(print, false);
                viewer.setVisible(true);
            }
            // Menangani kesalahan pembuatan laporan
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(this, "Terjadi kesalahan saat membuat laporan: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btn_unduhActionPerformed

    private void btn_sebelumnyaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_sebelumnyaActionPerformed
        // Pindah ke halaman sebelumnya jika belum di halaman pertama
        if (currentPage > 1) {
            currentPage--; // Kurangi nomor halaman
            reloadCurrentPage(); // Muat ulang data untuk halaman yang diperbarui
        }
    }//GEN-LAST:event_btn_sebelumnyaActionPerformed

    private void btn_berikutnyaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btn_berikutnyaActionPerformed
        // Pindah ke halaman berikutnya jika belum di halaman terakhir
        if (currentPage < totalPages) {
            currentPage++; // Tambah nomor halaman
            reloadCurrentPage(); // Muat ulang data untuk halaman yang diperbarui
        }
    }//GEN-LAST:event_btn_berikutnyaActionPerformed

    private void reloadCurrentPage() {
        // Memuat ulang data berdasarkan mode tampilan (tahun lalu atau bulan ini)
        if (isTahunLalu) {
            // Jika mode tahun lalu, muat data tahun sebelumnya
            int currentYear = Calendar.getInstance().get(Calendar.YEAR);
            int lastYear = currentYear - 1;
            loadDataForPage(-1, lastYear, true);
        } else {
            // Jika mode bulan ini, muat data untuk bulan dan tahun saat ini
            int bulanAngka = ubahBulanKeAngka(currentSelectedMonth);
            int currentYear = Calendar.getInstance().get(Calendar.YEAR);
            loadDataForPage(bulanAngka, currentYear, false);
        }
    }

    private void updatePaginationButtons() {
        // Mengaktifkan/menonaktifkan tombol "Sebelumnya" dan "Berikutnya"
        if (btn_sebelumnya != null) {
            btn_sebelumnya.setEnabled(currentPage > 1); // Aktif jika bukan halaman pertama
        }
        if (btn_berikutnya != null) {
            btn_berikutnya.setEnabled(currentPage < totalPages); // Aktif jika bukan halaman terakhir
        }
        // Memperbarui teks status halaman
        if (lblPageStatus != null) {
            lblPageStatus.setText("Halaman " + currentPage + " dari " + totalPages + " (Total: " + totalRows + " data)");
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuCatatanKeuanganAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuCatatanKeuanganAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuCatatanKeuanganAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuCatatanKeuanganAdmin.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MenuCatatanKeuanganAdmin().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable Tbl_Keuangan;
    private javax.swing.JButton btn_back;
    private javax.swing.JButton btn_berikutnya;
    private javax.swing.JButton btn_sebelumnya;
    private javax.swing.JButton btn_unduh;
    private javax.swing.JComboBox<String> combo_bulan;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JLabel lblPageStatus;
    // End of variables declaration//GEN-END:variables
}
